//
// (C) Copyright by Techmo sp. z o. o., 2019. All rights reserved.
//
#pragma once

#include "StkScene.h"

THIRD_PARTY_INCLUDES_START
#include <stk/ISoundToolKit.h>
#include <stk/PathVertexType.h>
#include <stk_ex/diagnostics/ISoundPathsCache.h>
THIRD_PARTY_INCLUDES_END

#include "HAL/ThreadSafeBool.h"

#include "StkExtensions.generated.h"

/// An actor that can be used to display sound paths generated by SoundToolKit engine as well as the acousical geometry.
UCLASS(HideCategories = (Actor, Advanced, Input, Rendering, LOD, Replication, Collision, Cooking, Transform))
class AStkExtensions : public AActor
{
	GENERATED_BODY()

public:
	AStkExtensions();

	// UObject interface
#if WITH_EDITOR
	virtual bool CanEditChange(const FProperty* InProperty) const override;
#endif
	// End of UObject interface

	// AActor interface
	virtual void PreInitializeComponents() override;
	virtual void BeginPlay() override;
	virtual void EndPlay(const EEndPlayReason::Type EndPlayReason) override;
	virtual void Tick(float DeltaSeconds) override;
	virtual void PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent) override;
	virtual void PostActorCreated() override;
	// End of AActor interface

	/// <summary>
	/// Used to determine the value of enableLiveSoundPaths setting.
	/// </summary>
	/// <returns>The value of enableLiveSoundPaths setting</returns>
	bool IsSoundPathsCachingEnabled() const;

	/// <summary>
	/// Displays all LiveSoundPaths produced by the SoundToolKit engine.
	/// </summary>
	void ShowSoundPaths();

	/// <summary>
	/// Hides currently displayed LiveSoundPaths.
	/// </summary>
	void HideSoundPaths();

	/// Whether or not sound paths should be rendered on the scene.
	/// Available in PIE mode only.
	UPROPERTY(EditAnywhere, Category = "LiveSoundPaths")
	bool bShowLiveSoundPaths;

	/// Thickness of the rendered sound paths
	/// Available only in PIE mode.
	UPROPERTY(EditAnywhere, Category = "LiveSoundPaths", meta = (ClampMin = "0.0", ClampMax = "1.0"))
	float Thickness = 0.0f;

	/// Whether or not acoustic scene should be rendered on display.
	/// Available only in PIE mode.
	UPROPERTY(EditAnywhere, Category = "AcousticScene")
	bool bShowAcousticScene;

	/// The amount of models used to build acoustic scene (including default model).
	/// Available only in PIE mode.
	UPROPERTY(VisibleAnywhere, Category = "AcousticScene")
	int32 NumberOfModels;

	/// The amount of mesh sections used to build acoustic scene.
	/// Available only in PIE mode.
	UPROPERTY(VisibleAnywhere, Category = "AcousticScene")
	int32 NumberOfMeshSections;

	/// The amount of triangles used to build acoustic scene.
	/// Available only in PIE mode.
	UPROPERTY(VisibleAnywhere, Category = "AcousticScene")
	int32 NumberOfTriangles;

private:
	void DrawLine(const FVector& Start, const FVector& End, const FColor& Color);
	void FlushLines();
	void RegenerateAcousticSceneMesh();

	UPROPERTY(Transient)
	class ULineBatchComponent* SoundPathsDrawer;

	stk::UniqueResource<stk_ex::diagnostics::ISoundPathsCache> StkSoundPathsCache;
	std::vector<std::vector<stk_ex::diagnostics::ISoundPathsCache::SoundPathVertex>> StkLiveSoundPaths;

	UPROPERTY()
	class UProceduralMeshComponent* AcousticSceneMeshComponent;

	UPROPERTY()
	class UMaterial* AcousticSceneMaterial;

private:
	/// Used for queuing requests to regenerate acoustic scene mesh component.
	FThreadSafeBool bShouldRefreshAcousticScene{ false };

	/// Used to synchronize acoustic scene updates.
	/// On every command send to SoundToolKit the counter is incremented.
	/// The counter is decremented at the end of every command execution.
	/// When value of this counter is 0,
	/// it means that all commands required to refresh acoustic scene are already executed and next update can be invoked now.
	FThreadSafeCounter NumberOfQueuedSoundToolKitCommands{ 0 };
};